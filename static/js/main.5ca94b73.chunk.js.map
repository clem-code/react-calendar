{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","month","updateMonth","eventList","updateEventList","newEvent","updateNewEvent","handleChange","event","target","value","useEffect","april","events","index","push","date","console","log","aprilGen","localStorage","getItem","eventSaved","JSON","parse","className","Container","Row","Col","xs","map","day","Card","style","width","Body","Title","Form","Group","Control","id","onChange","placeholder","Button","variant","onClick","indexFunc","indexCheck","Number","newList","setItem","stringify","window","location","reload","handleSubmit","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAAe,I,4DC8FAA,MAzFf,WAAe,MAEgBC,mBAAS,IAFzB,mBAENC,EAFM,KAECC,EAFD,OAGwBF,mBAAS,IAHjC,mBAGNG,EAHM,KAGKC,EAHL,OAIsBJ,mBAAS,IAJ/B,mBAINK,EAJM,KAIIC,EAJJ,KA6Bb,SAASC,EAAaC,GACpBF,EAAeE,EAAMC,OAAOC,OAsB9B,OA9CAC,qBAAU,WAeR,GAdA,WAGE,IAFA,IAAMC,EAAQ,GACRC,EAAS,GACNC,EAAQ,EAAGA,EAAQ,GAAIA,IAC9BF,EAAMG,KAAKD,GACXD,EAAOE,KAAK,CAAEC,KAAMF,EAAOD,OAAQ,KAErCI,QAAQC,IAAIN,GACZK,QAAQC,IAAIL,GACZX,EAAYU,GACZR,EAAgBS,GAElBM,GAEIC,aAAaC,QAAQ,UAAW,CAClC,IAAMC,EAAaC,KAAKC,MAAMJ,aAAaC,QAAQ,WAAa,MAChEJ,QAAQC,IAAI,8BAA+BI,GAC3ClB,EAAgBkB,MAEjB,IA0BEnB,EAIH,qBAAKsB,UAAU,MAAf,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UAEE,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIJ,UAAU,4BAAvB,SACGxB,EAAM6B,KAAI,SAACC,EAAKjB,GACf,OAAO,cAACkB,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SAAtB,SACL,eAACF,EAAA,EAAKG,KAAN,WACE,eAACH,EAAA,EAAKI,MAAN,+BAAuBtB,EAAQ,MAE/B,eAACuB,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,MAAN,UACE,cAACD,EAAA,EAAKE,QAAN,CAAcC,GAAI1B,EAAO2B,SAAUlC,EAAcmC,YAAY,mBAE/D,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,GAAI1B,EAAO+B,QAAS,SAACrC,GAAD,OArChE,SAAsBsC,GACpB,IAAMC,EAAaC,OAAOF,GACpBG,EAAU9C,EAAU2B,KAAI,SAACtB,EAAOM,GAEpC,OAAIiC,GAAcjC,GAChBN,EAAMK,OAAOE,KAAKV,GACXG,GAEAA,KAGXJ,EAAgB6C,GAEZ7B,cACFA,aAAa8B,QAAQ,SAAU3B,KAAK4B,UAAUF,IAEhDG,OAAOC,SAASC,SAsBEC,CAAa/C,EAAMC,OAAO+B,KAD5B,uBAKDrC,EAAUW,GAAOD,OAAOiB,KAAI,SAACtB,GAC5B,OAAO,mBAAGyB,MAAO,CAAEuB,MAAO,OAAnB,SAA6BhD,uBAvB7C,MC9CIiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5ca94b73.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { Jumbotron, Container, Col, Row, Media, Nav, Navbar, Figure, Modal, Button, Card, Form } from 'react-bootstrap'\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n  //State\n  const [month, updateMonth] = useState([])\n  const [eventList, updateEventList] = useState([])\n  const [newEvent, updateNewEvent] = useState('')\n  //Generates an empty April calendar upon loading the page\n  useEffect(() => {\n    function aprilGen() {\n      const april = []\n      const events = []\n      for (let index = 1; index < 31; index++) {\n        april.push(index)\n        events.push({ date: index, events: [] })\n      }\n      console.log(april)\n      console.log(events)\n      updateMonth(april)\n      updateEventList(events)\n    }\n    aprilGen()\n    //Loads saved events from local storage to the calendar\n    if (localStorage.getItem('events')) {\n      const eventSaved = JSON.parse(localStorage.getItem(\"events\") || \"[]\")\n      console.log('this is local storage saved', eventSaved)\n      updateEventList(eventSaved)\n    }\n  }, [])\n\n  //Handles the input forms on each calendar day \n  function handleChange(event) {\n    updateNewEvent(event.target.value)\n  }\n  //Handles the buttons on each calendar day\n  function handleSubmit(indexFunc) {\n    const indexCheck = Number(indexFunc)\n    const newList = eventList.map((event, index) => {\n      //generates a new calendar list with the new event added in\n      if (indexCheck == index) {\n        event.events.push(newEvent)\n        return event\n      } else {\n        return event\n      }\n    })\n    updateEventList(newList)\n    // adds updated calendar to local storage\n    if (localStorage) {\n      localStorage.setItem('events', JSON.stringify(newList))\n    }\n    window.location.reload()\n  }\n\n  if (!eventList) {\n    return null\n  }\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n\n          <Col xs={15} className=\"d-flex flex-row flex-wrap\">\n            {month.map((day, index) => {\n              return <Card style={{ width: '18rem' }}>\n                <Card.Body>\n                  <Card.Title> {`April ${index + 1}`}\n                  </Card.Title>\n                  <Form>\n                    <Form.Group >\n                      <Form.Control id={index} onChange={handleChange} placeholder=\"Add an event\" />\n                    </Form.Group>\n                    <Button variant=\"primary\" id={index} onClick={(event) =>\n                      handleSubmit(event.target.id)}>\n                      Submit\n                    </Button>\n                  </Form>\n                  {eventList[index].events.map((event) => {\n                    return <p style={{ color: \"red\" }}>{event}</p>\n                  })}\n                </Card.Body>\n              </Card>\n            })}\n          </Col>\n\n        </Row>\n      </Container>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}